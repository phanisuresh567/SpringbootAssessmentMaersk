/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.maersk.springboot.api;

import com.maersk.springboot.api.model.Color;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Mixing", description = "the Mixing API")
public interface MixingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /mix : Mix two colors
     * Additive mix of two colors 1:1 and returns the result.
     *
     * @param color1 Name of first color in the mix (required)
     * @param color2 Name of second color in the mix (required)
     * @return successful operation (status code 200)
     *         or Invalid parameters supplied (status code 400)
     *         or One or both colors could not be found (status code 404)
     */
    @ApiOperation(value = "Mix two colors", nickname = "mixColorsByName", notes = "Additive mix of two colors 1:1 and returns the result.", response = Color.class, tags={ "mixing", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Color.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied"),
        @ApiResponse(code = 404, message = "One or both colors could not be found") })
    @GetMapping(value = "/mix",
        produces = { "application/json" })
     ResponseEntity<Color> mixColorsByName(@NotNull @ApiParam(value = "Name of first color in the mix", required = true) @Valid @RequestParam(value = "color1", required = true) String color1,
    		 @NotNull @ApiParam(value = "Name of second color in the mix", required = true) @Valid @RequestParam(value = "color2", required = true) String color2) ;

}
