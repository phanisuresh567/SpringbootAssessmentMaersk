/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.maersk.springboot.api;

import com.maersk.springboot.api.model.Color;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Colors", description = "the Colors API")
public interface ColorsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /colors : Add a new color to the store
     * Add a new solor to the store
     *
     * @param color Create a new color in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a new color to the store", nickname = "addColor", notes = "Add a new solor to the store", response = Color.class, tags={ "colors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Color.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(value = "/colors",
        produces = { "application/json" }, 
        consumes = { "application/json" })
     ResponseEntity<Color> addColor(@ApiParam(value = "Create a new color in the store" ,required=true )  @Valid @RequestBody Color color);


    /**
     * DELETE /colors/{colorName} : Deletes a color
     * delete a color
     *
     * @param colorName Name of color to delete (required)
     * @return Invalid color name (status code 400)
     */
    @ApiOperation(value = "Deletes a color", nickname = "deleteColor", notes = "delete a color", tags={ "colors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid color name") })
    @PostMapping(value = "/colors/{colorName}")
     ResponseEntity<Void> deleteColor(@ApiParam(value = "Name of color to delete",required=true) @PathVariable("colorName") String colorName);


    /**
     * GET /colors/{colorName} : Find color by name
     * Returns a single color
     *
     * @param colorName Name of color to return (required)
     * @return successful operation (status code 200)
     *         or Invalid name supplied (status code 400)
     *         or Color not found (status code 404)
     */
    @ApiOperation(value = "Find color by name", nickname = "getColorByName", notes = "Returns a single color", response = Color.class, tags={ "colors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Color.class),
        @ApiResponse(code = 400, message = "Invalid name supplied"),
        @ApiResponse(code = 404, message = "Color not found") })
    @GetMapping(value = "/colors/{colorName}",
        produces = { "application/json" })
     ResponseEntity<Color> getColorByName(@ApiParam(value = "Name of color to return",required=true) @PathVariable("colorName") String colorName);


    /**
     * GET /colors : List all colors
     * Returns all colors in the store
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "List all colors", nickname = "getColors", notes = "Returns all colors in the store", response = Color.class, responseContainer = "List", tags={ "colors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Color.class, responseContainer = "List") })
    @GetMapping(value = "/colors",
        produces = { "application/json" })
     ResponseEntity<List<Color>> getColors();


    /**
     * PUT /colors/{colorName} : Update an existing color
     * Update an existing color by name
     *
     * @param colorName Name of color to return (required)
     * @param color Update an existent color in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Color not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing color", nickname = "updateColor", notes = "Update an existing color by name", response = Color.class, tags={ "colors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Color.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Color not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @PutMapping(value = "/colors/{colorName}",
        produces = { "application/json" }, 
        consumes = { "application/json" })
     ResponseEntity<Color> updateColor(@ApiParam(value = "Name of color to return",required=true) @PathVariable("colorName") String colorName,@ApiParam(value = "Update an existent color in the store" ,required=true )  @Valid @RequestBody Color color);

}
